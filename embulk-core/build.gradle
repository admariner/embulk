plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = rootProject.group
version = rootProject.version
description = "Embulk: Core classes"

configurations {
    // The "spi" configuration is used to make the scope in pom.xml to "provided".
    spi {
        resolutionStrategy.activateDependencyLocking()
        transitive = false
    }

    implementation.extendsFrom(spi)
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    // "-XDenableSunApiLintControl" enables `@SuppressWarnings("sunapi")` to suppress warnings against sun.misc.Unsafe.
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked" << "-XDenableSunApiLintControl"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    // All the class files of "embulk-spi" are mixed into the "embulk-core" JAR file, and
    // the "embulk-core" Maven artifact has the dependency on "embulk-spi" as "provided" in pom.xml.
    //
    // The artifacts are structured like this so that they can bypass the restriction of Java (9+)
    // Module System that multiple JAR files (modules) cannot contain the same Java package classes.
    //
    // This mixing is not necessary when using Embulk with the executable all-in-one binary. But,
    // it would not work well with Java 9+ in case of using Embulk with self-hosted deployment of
    // the separated artifacts, embulk-spi, embulk-core, and else.
    spi "org.embulk:embulk-spi:0.11"

    // The transitive dependencies of "embulk-spi" are listed explicitly in dependencies { ... }.
    //
    // The explicit dependencies may include newer versions than the dependencies of "embulk-spi",
    // especially after "embulk-spi" goes out for another Git repository. Note that "embulk-core"
    // may need to have newer versions of "slf4j-api" or "msgpack-core" before updating them in
    // "embulk-spi".
    implementation "org.slf4j:slf4j-api:2.0.13"
    implementation "org.msgpack:msgpack-core:0.8.24"

    // This "embulk-core" should not have any more library dependencies.
    //
    // See: EEP-7: Core Library Dependencies (/docs/eeps/eep-0007.md)

    testImplementation "junit:junit:4.13.2"
    testImplementation project(":embulk-junit4")
    testImplementation "ch.qos.logback:logback-classic:1.3.14"

    // TODO: Remove this, and load it with EmbulkDependencyClassLoader.
    // This statement gets it loaded by the top-level ClassLoader.
    testImplementation project(":embulk-deps")
}

javadoc {
    options {
        locale = "en_US"
        encoding = "UTF-8"
        overview = "src/main/html/overview.html"
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

jar {
    // All the class files of "embulk-spi" are mixed into the "embulk-core" JAR file.
    from(configurations.spi.collect { it.isDirectory() ? it : zipTree(it) }) {
        // META-INF/INDEX.LIST from dependencies should be definitely excluded in the all-in-one executable JAR file.
        exclude "META-INF/INDEX.LIST"

        // Exclude dependencies' LICENSE and NOTICE files here. They should be included in a different way.
        exclude "META-INF/LICENSE*"
        exclude "META-INF/NOTICE*"

        // Exclude module-info.class from dependencies.
        //
        // It should be okay while Embulk basically expects Java 8, and it should not break things even for Java 9+.
        // But, it is nice to revisit module-info.class when Embulk officially supports modern Java versions.
        //
        // TODO: Provide module-info.class unified for the all-in-one executable JAR file for the Java 9+ Module System.
        exclude "META-INF/versions/*/module-info.class"
    }

    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }

    manifest {
        attributes "Implementation-Title": project.name,
                   "Implementation-Version": project.version,
                   "Implementation-Vendor-Id": project.group,
                   "Specification-Title": project.name,
                   "Specification-Version": project.version
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }
}

// It should not publish a `.module` file in Maven Central.
// https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                name = project.name
                afterEvaluate { project ->
                    // "description" is declared in subproject's build.gradle. It needs to be configured after evaluation.
                    description = project.description
                }
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Sadayuki Furuhashi"
                        email = "frsyuki@gmail.com"
                    }
                    developer {
                        name = "Muga Nishizawa"
                        email = "muga.nishizawa@gmail.com"
                    }
                    developer {
                        name = "Satoshi Akama"
                        email = "satoshiakama@gmail.com"
                    }
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@acm.org"
                    }
                    developer {
                        name = "Shinichi Ishimura"
                        email = "shiketaudonko41@gmail.com"
                    }
                    developer {
                        name = "Roman Shtykh"
                        email = "rshtykh@yahoo.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk.git"
                    url = "https://github.com/embulk/embulk"
                }

                // The "embulk-core" Maven artifact has the dependency on "embulk-spi" as "provided" in pom.xml.
                withXml {
                    def spiDependencies = []
                    project.configurations.spi.allDependencies.each { dependency ->
                        spiDependencies.add(dependency.group + ":" + dependency.name)
                    }
                    asNode().dependencies[0].each { dependency ->
                        if ((dependency.groupId[0].value()[0] + ":" + dependency.artifactId[0].value()[0]) in spiDependencies) {
                            println "[MODIFY] " + dependency.groupId[0].value()[0] +
                                    ":" + dependency.artifactId[0].value()[0] +
                                    ":" + dependency.version[0].value()[0] +
                                    " @ " + dependency.scope[0].value()[0] +
                                     " => provided"
                            dependency.scope[0].setValue("provided")
                        } else {
                            println "[ KEEP ] " + dependency.groupId[0].value()[0] +
                                    ":" + dependency.artifactId[0].value()[0] +
                                    ":" + dependency.version[0].value()[0] +
                                    " @ " + dependency.scope[0].value()[0]
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

tasks.withType(Test) {
    systemProperties System.properties.findAll { it.key.startsWith("org.embulk") }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

test {
    dependsOn ":test-helpers:deploy"
    maxHeapSize = "1536m"
    forkEvery = 1  // test processes are forked by each test class (default is 0)
}

tasks.withType(Checkstyle) {
    reports {
        // Not to skip up-to-date checkstyles.
        outputs.upToDateWhen { false }
    }
}

checkstyle {
    toolVersion "8.7"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "checkstyle.config.path": file("${projectDir}/config/checkstyle")
    ]
    ignoreFailures = false
    maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
}
